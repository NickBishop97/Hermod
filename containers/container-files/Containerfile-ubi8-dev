########################################################################################################################
# Filename: Containerfile-ubi8-dev
# 
# Date: 2022-07-07
# Author: Christopher J. Mundt
#
# Desc: Dockerfile used to define a UBI 8 Development container image that has everything installed
#       to && FastDDS-Python
#
# Reference: https://confluence.sde.sp.gc1.myngc.com/pages/viewpage.action?pageId=305785145
#            https://fast-dds.docs.eprosima.com/en/latest/fastdds/getting_started/simple_python_app/simple_python_app.html
#            https://www.redhat.com/sysadmin/tiny-containers
# 
# Info: Based this off of work previously completed under the Triton and Sleipnir projects
#
#
#           ************************************************************************************************************
# History:  |Version    Date        Task         Author                Desc
#           |-----------------------------------------------------------------------------------------------------------
#           | 1.0       2022-07-07  LETS-4837    Christopher J. Mundt  Initial Rev.
#           | 1.1       2022-07-18  LETS-4837    Christopher J. Mundt  Updating to the UBI8-Init base base image
#           |-----------------------------------------------------------------------------------------------------------
# 
# Notes:    Consolidate the number of && commands because each 1 equates a layer when being built,
#           which can result in larger than necessary images.  Also clean up repos when done before
#           exiting a command to minimize size.
########################################################################################################################


#############################################
#
# Start from the Base UBI8-init image.
# Need to use the Init version to support DBUS/Systemd
# whic is needed to support Fast-DDS-Python Install later.
#
FROM registry.access.redhat.com/ubi8/ubi-init as dev-base
USER root
LABEL maintainer="christopher.mundt@ngc.com"

#############################################
#
# Install Development Tools and Dependencies.
#
#    *  Enable Codeready Repo
#    *  Enable module mariadb-devel (Needed for asio)
#    *  Install "Development Tools"
#    *  Install findutils, gedit, wget
#    *  Intall Development Dependencies
#    *  Install FastDDS Dev Dependencies
#    *  Install DBUS Libraries
#    *  Install Python3.8
#    *  Install Python Libraries
#    *  Flush dnf cache
#    *  Remove Yum cache

RUN dnf config-manager --enable codeready-builder-for-rhel-8-x86_64-rpms \
 && dnf module -y --enablerepo=codeready-builder-for-rhel-8-x86_64-rpms enable mariadb-devel \
 && dnf group install -y "Development Tools" \
 && dnf install -y findutils gedit wget maven \
 && dnf install -y clang boost boost-devel cmake doxygen cppcheck mesa-libGLU mesa-libGLU-devel mesa-dri-drivers glx-utils \
 && dnf install -y tinyxml2.x86_64 tinyxml2-devel.x86_64 openssl-devel.x86_64 openssl-pkcs11.x86_64 asio-devel \
 && dnf install -y dbus-c++.x86_64 dbus-devel.x86_64 dbus-x11.x86_64 \
 && dnf install -y  python38 python38-devel.x86_64 \
 && pip3 install --no-cache-dir gcovr lcov colcon-common-extensions vcstool \
 && dnf clean -y all \
 && rm -rf /var/cache/yum

#############################################
#
# Install Gradle
# 
#    *  Gradle 6.9
WORKDIR /opt
RUN wget https://services.gradle.org/distributions/gradle-6.9-all.zip \
 && unzip -d /opt gradle-6.9-all.zip \
 && mv gradle-6.9 gradle 
RUN /opt/gradle/bin/gradle --quiet
COPY configs/gradle.properties /root/.gradle
RUN rm gradle-6.9-all.zip 

#############################################
#
# Put .bashrc in place
# 
COPY configs/ubi8-dev-root-bashrc /root/.bashrc
