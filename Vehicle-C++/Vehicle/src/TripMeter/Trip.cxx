// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Trip.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Trip.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Trip::Trip()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@61f8bee4
    m_index = 0;
    // m_miles com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7b49cea0
    m_miles = 0.0;
    // m_speed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@887af79
    m_speed = 0.0;
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7fac631b
    m_time = 0.0;
    // m_MPG com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5b87ed94
    m_MPG = 0.0;

}

Trip::~Trip()
{





}

Trip::Trip(
        const Trip& x)
{
    m_index = x.m_index;
    m_miles = x.m_miles;
    m_speed = x.m_speed;
    m_time = x.m_time;
    m_MPG = x.m_MPG;
}

Trip::Trip(
        Trip&& x)
{
    m_index = x.m_index;
    m_miles = x.m_miles;
    m_speed = x.m_speed;
    m_time = x.m_time;
    m_MPG = x.m_MPG;
}

Trip& Trip::operator =(
        const Trip& x)
{

    m_index = x.m_index;
    m_miles = x.m_miles;
    m_speed = x.m_speed;
    m_time = x.m_time;
    m_MPG = x.m_MPG;

    return *this;
}

Trip& Trip::operator =(
        Trip&& x)
{

    m_index = x.m_index;
    m_miles = x.m_miles;
    m_speed = x.m_speed;
    m_time = x.m_time;
    m_MPG = x.m_MPG;

    return *this;
}

bool Trip::operator ==(
        const Trip& x) const
{

    return (m_index == x.m_index && m_miles == x.m_miles && m_speed == x.m_speed && m_time == x.m_time && m_MPG == x.m_MPG);
}

bool Trip::operator !=(
        const Trip& x) const
{
    return !(*this == x);
}

size_t Trip::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t Trip::getCdrSerializedSize(
        const Trip& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void Trip::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_miles;
    scdr << m_speed;
    scdr << m_time;
    scdr << m_MPG;

}

void Trip::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_miles;
    dcdr >> m_speed;
    dcdr >> m_time;
    dcdr >> m_MPG;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Trip::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Trip::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Trip::index()
{
    return m_index;
}

/*!
 * @brief This function sets a value in member miles
 * @param _miles New value for member miles
 */
void Trip::miles(
        double _miles)
{
    m_miles = _miles;
}

/*!
 * @brief This function returns the value of member miles
 * @return Value of member miles
 */
double Trip::miles() const
{
    return m_miles;
}

/*!
 * @brief This function returns a reference to member miles
 * @return Reference to member miles
 */
double& Trip::miles()
{
    return m_miles;
}

/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void Trip::speed(
        double _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
double Trip::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
double& Trip::speed()
{
    return m_speed;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void Trip::time(
        double _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
double Trip::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
double& Trip::time()
{
    return m_time;
}

/*!
 * @brief This function sets a value in member MPG
 * @param _MPG New value for member MPG
 */
void Trip::MPG(
        double _MPG)
{
    m_MPG = _MPG;
}

/*!
 * @brief This function returns the value of member MPG
 * @return Value of member MPG
 */
double Trip::MPG() const
{
    return m_MPG;
}

/*!
 * @brief This function returns a reference to member MPG
 * @return Reference to member MPG
 */
double& Trip::MPG()
{
    return m_MPG;
}


size_t Trip::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool Trip::isKeyDefined()
{
    return false;
}

void Trip::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
