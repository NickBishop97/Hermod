// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Move.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Move.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Move::Move()
{
    // m_ismoving com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65e2dbf3
    m_ismoving = 0;
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@61f8bee4
    m_index = 0;

}

Move::~Move()
{


}

Move::Move(
        const Move& x)
{
    m_ismoving = x.m_ismoving;
    m_index = x.m_index;
}

Move::Move(
        Move&& x)
{
    m_ismoving = x.m_ismoving;
    m_index = x.m_index;
}

Move& Move::operator =(
        const Move& x)
{

    m_ismoving = x.m_ismoving;
    m_index = x.m_index;

    return *this;
}

Move& Move::operator =(
        Move&& x)
{

    m_ismoving = x.m_ismoving;
    m_index = x.m_index;

    return *this;
}

bool Move::operator ==(
        const Move& x) const
{

    return (m_ismoving == x.m_ismoving && m_index == x.m_index);
}

bool Move::operator !=(
        const Move& x) const
{
    return !(*this == x);
}

size_t Move::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Move::getCdrSerializedSize(
        const Move& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Move::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_ismoving;
    scdr << m_index;

}

void Move::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_ismoving;
    dcdr >> m_index;
}

/*!
 * @brief This function sets a value in member ismoving
 * @param _ismoving New value for member ismoving
 */
void Move::ismoving(
        uint32_t _ismoving)
{
    m_ismoving = _ismoving;
}

/*!
 * @brief This function returns the value of member ismoving
 * @return Value of member ismoving
 */
uint32_t Move::ismoving() const
{
    return m_ismoving;
}

/*!
 * @brief This function returns a reference to member ismoving
 * @return Reference to member ismoving
 */
uint32_t& Move::ismoving()
{
    return m_ismoving;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Move::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Move::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Move::index()
{
    return m_index;
}


size_t Move::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Move::isKeyDefined()
{
    return false;
}

void Move::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
