// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
 * @file LowFuelAlertPubSubTypes.cpp
=======
 * @file MpGPubSubTypes.cpp
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
#include "LowFuelAlertPubSubTypes.h"
=======
#include "MpGPubSubTypes.h"
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
LowFuelAlertPubSubType::LowFuelAlertPubSubType()
{
    setName("LowFuelAlert");
    auto type_size = LowFuelAlert::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4; /*encapsulation*/
    m_isGetKeyDefined = LowFuelAlert::isKeyDefined();
    size_t keyLength = LowFuelAlert::getKeyMaxCdrSerializedSize() > 16 ?
            LowFuelAlert::getKeyMaxCdrSerializedSize() : 16;
=======
MpGPubSubType::MpGPubSubType()
{
    setName("MpG");
    auto type_size = MpG::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4; /*encapsulation*/
    m_isGetKeyDefined = MpG::isKeyDefined();
    size_t keyLength = MpG::getKeyMaxCdrSerializedSize() > 16 ?
            MpG::getKeyMaxCdrSerializedSize() : 16;
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
LowFuelAlertPubSubType::~LowFuelAlertPubSubType()
=======
MpGPubSubType::~MpGPubSubType()
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
{
    if (m_keyBuffer != nullptr)
    {
        free(m_keyBuffer);
    }
}

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
bool LowFuelAlertPubSubType::serialize(
        void* data,
        SerializedPayload_t* payload)
{
    LowFuelAlert* p_type = static_cast<LowFuelAlert*>(data);
=======
bool MpGPubSubType::serialize(
        void* data,
        SerializedPayload_t* payload)
{
    MpG* p_type = static_cast<MpG*>(data);
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        // Serialize the object.
        p_type->serialize(ser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    // Get the serialized length
    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
    return true;
}

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
bool LowFuelAlertPubSubType::deserialize(
=======
bool MpGPubSubType::deserialize(
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
        SerializedPayload_t* payload,
        void* data)
{
    try
    {
        //Convert DATA to pointer of your type
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
        LowFuelAlert* p_type = static_cast<LowFuelAlert*>(data);
=======
        MpG* p_type = static_cast<MpG*>(data);
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx

        // Object that manages the raw buffer.
        eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

        // Object that deserializes the data.
        eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

        // Deserialize encapsulation.
        deser.read_encapsulation();
        payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

        // Deserialize the object.
        p_type->deserialize(deser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    {
        return false;
    }

    return true;
}

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
std::function<uint32_t()> LowFuelAlertPubSubType::getSerializedSizeProvider(
=======
std::function<uint32_t()> MpGPubSubType::getSerializedSizeProvider(
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
        void* data)
{
    return [data]() -> uint32_t
           {
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
               return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<LowFuelAlert*>(data))) +
=======
               return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<MpG*>(data))) +
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
                      4u /*encapsulation*/;
           };
}

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
void* LowFuelAlertPubSubType::createData()
{
    return reinterpret_cast<void*>(new LowFuelAlert());
}

void LowFuelAlertPubSubType::deleteData(
        void* data)
{
    delete(reinterpret_cast<LowFuelAlert*>(data));
}

bool LowFuelAlertPubSubType::getKey(
=======
void* MpGPubSubType::createData()
{
    return reinterpret_cast<void*>(new MpG());
}

void MpGPubSubType::deleteData(
        void* data)
{
    delete(reinterpret_cast<MpG*>(data));
}

bool MpGPubSubType::getKey(
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
        void* data,
        InstanceHandle_t* handle,
        bool force_md5)
{
    if (!m_isGetKeyDefined)
    {
        return false;
    }

<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
    LowFuelAlert* p_type = static_cast<LowFuelAlert*>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
            LowFuelAlert::getKeyMaxCdrSerializedSize());
=======
    MpG* p_type = static_cast<MpG*>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
            MpG::getKeyMaxCdrSerializedSize());
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx

    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
    p_type->serializeKey(ser);
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlertPubSubTypes.cxx
    if (force_md5 || LowFuelAlert::getKeyMaxCdrSerializedSize() > 16)
=======
    if (force_md5 || MpG::getKeyMaxCdrSerializedSize() > 16)
>>>>>>> master:Vehicle-C++/Vehicle/src/MPG/MpGPubSubTypes.cxx
    {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_md5.digest[i];
        }
    }
    else
    {
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

