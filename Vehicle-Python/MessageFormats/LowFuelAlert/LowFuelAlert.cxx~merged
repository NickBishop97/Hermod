// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LowFuelAlert.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LowFuelAlert.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

LowFuelAlert::LowFuelAlert()
{
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
=======
>>>>>>> master
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2758fe70
    m_index = 0;
    // m_isFuelLow com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f36e637
    m_isFuelLow = 0;
<<<<<<< HEAD
=======
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65e2dbf3
    m_index = 0;
    // m_milesTraveled com.eprosima.idl.parser.typecode.PrimitiveTypeCode@61f8bee4
    m_milesTraveled = 0.0;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
>>>>>>> master

}

LowFuelAlert::~LowFuelAlert()
{


}

LowFuelAlert::LowFuelAlert(
        const LowFuelAlert& x)
{
    m_index = x.m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    m_isFuelLow = x.m_isFuelLow;
=======
    m_milesTraveled = x.m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    m_isFuelLow = x.m_isFuelLow;
>>>>>>> master
}

LowFuelAlert::LowFuelAlert(
        LowFuelAlert&& x)
{
    m_index = x.m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    m_isFuelLow = x.m_isFuelLow;
=======
    m_milesTraveled = x.m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    m_isFuelLow = x.m_isFuelLow;
>>>>>>> master
}

LowFuelAlert& LowFuelAlert::operator =(
        const LowFuelAlert& x)
{

    m_index = x.m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    m_isFuelLow = x.m_isFuelLow;
=======
    m_milesTraveled = x.m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    m_isFuelLow = x.m_isFuelLow;
>>>>>>> master

    return *this;
}

LowFuelAlert& LowFuelAlert::operator =(
        LowFuelAlert&& x)
{

    m_index = x.m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    m_isFuelLow = x.m_isFuelLow;
=======
    m_milesTraveled = x.m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    m_isFuelLow = x.m_isFuelLow;
>>>>>>> master

    return *this;
}

bool LowFuelAlert::operator ==(
        const LowFuelAlert& x) const
{

<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    return (m_index == x.m_index && m_isFuelLow == x.m_isFuelLow);
=======
    return (m_index == x.m_index && m_milesTraveled == x.m_milesTraveled);
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    return (m_index == x.m_index && m_isFuelLow == x.m_isFuelLow);
>>>>>>> master
}

bool LowFuelAlert::operator !=(
        const LowFuelAlert& x) const
{
    return !(*this == x);
}

size_t LowFuelAlert::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
=======
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
>>>>>>> master



    return current_alignment - initial_alignment;
}

size_t LowFuelAlert::getCdrSerializedSize(
        const LowFuelAlert& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
=======
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
>>>>>>> master



    return current_alignment - initial_alignment;
}

void LowFuelAlert::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    scdr << m_isFuelLow;
=======
    scdr << m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    scdr << m_isFuelLow;
>>>>>>> master

}

void LowFuelAlert::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
    dcdr >> m_isFuelLow;
=======
    dcdr >> m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
    dcdr >> m_isFuelLow;
>>>>>>> master
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void LowFuelAlert::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t LowFuelAlert::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& LowFuelAlert::index()
{
    return m_index;
}

/*!
<<<<<<< HEAD
<<<<<<< HEAD:Vehicle-Python/MessageFormats/LowFuelAlert/LowFuelAlert.cxx
=======
>>>>>>> master
 * @brief This function sets a value in member isFuelLow
 * @param _isFuelLow New value for member isFuelLow
 */
void LowFuelAlert::isFuelLow(
        int32_t _isFuelLow)
{
    m_isFuelLow = _isFuelLow;
}

/*!
 * @brief This function returns the value of member isFuelLow
 * @return Value of member isFuelLow
 */
int32_t LowFuelAlert::isFuelLow() const
{
    return m_isFuelLow;
}

/*!
 * @brief This function returns a reference to member isFuelLow
 * @return Reference to member isFuelLow
 */
int32_t& LowFuelAlert::isFuelLow()
{
    return m_isFuelLow;
<<<<<<< HEAD
=======
 * @brief This function sets a value in member milesTraveled
 * @param _milesTraveled New value for member milesTraveled
 */
void Miles::milesTraveled(
        double _milesTraveled)
{
    m_milesTraveled = _milesTraveled;
}

/*!
 * @brief This function returns the value of member milesTraveled
 * @return Value of member milesTraveled
 */
double Miles::milesTraveled() const
{
    return m_milesTraveled;
}

/*!
 * @brief This function returns a reference to member milesTraveled
 * @return Reference to member milesTraveled
 */
double& Miles::milesTraveled()
{
    return m_milesTraveled;
>>>>>>> master:Vehicle-C++/Vehicle/src/Miles/Miles.cxx
=======
>>>>>>> master
}


size_t LowFuelAlert::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool LowFuelAlert::isKeyDefined()
{
    return false;
}

void LowFuelAlert::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
